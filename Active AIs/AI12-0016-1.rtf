{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff1\deff0\stshfdbch1\stshfloch1\stshfhich1\stshfbi1\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f1\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhiminor\f31506\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f54\fbidi \fswiss\fcharset238\fprq2 Arial CE;}
{\f55\fbidi \fswiss\fcharset204\fprq2 Arial Cyr;}{\f57\fbidi \fswiss\fcharset161\fprq2 Arial Greek;}{\f58\fbidi \fswiss\fcharset162\fprq2 Arial Tur;}{\f59\fbidi \fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f60\fbidi \fswiss\fcharset178\fprq2 Arial (Arabic);}{\f61\fbidi \fswiss\fcharset186\fprq2 Arial Baltic;}{\f62\fbidi \fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhimajor\f31533\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhimajor\f31534\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhiminor\f31569\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}
{\fhiminor\f31571\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhiminor\f31572\fbidi \froman\fcharset162\fprq2 Cambria Tur;}{\fhiminor\f31575\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}
{\fhiminor\f31576\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f44\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f45\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\f47\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f48\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\f49\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f50\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f51\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f52\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green0\blue0;\red0\green0\blue0;
\red67\green67\blue67;\red102\green102\blue102;}{\*\defchp \fs22\lang9\langfe1033\loch\af1\hich\af1\dbch\af1\langnp9 }{\*\defpap \ql \li0\ri0\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }
\noqfpromote {\stylesheet{\ql \li0\ri0\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs22\alang1025 \ltrch\fcs0 \fs22\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 
\snext0 \sqformat \spriority0 Normal;}{\s1\ql \li0\ri0\sb400\sa120\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs40\alang1025 \ltrch\fcs0 
\fs40\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 \sbasedon0 \snext0 \sqformat \spriority9 heading 1;}{\s2\ql \li0\ri0\sb360\sa120\sl276\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs32\alang1025 \ltrch\fcs0 \fs32\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 
\sbasedon0 \snext0 \ssemihidden \sunhideused \sqformat \spriority9 heading 2;}{\s3\ql \li0\ri0\sb320\sa80\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs28\alang1025 
\ltrch\fcs0 \fs28\cf19\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 \sbasedon0 \snext0 \ssemihidden \sunhideused \sqformat \spriority9 heading 3;}{\s4\ql \li0\ri0\sb280\sa80\sl276\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs24\alang1025 \ltrch\fcs0 \fs24\cf20\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 
\sbasedon0 \snext0 \ssemihidden \sunhideused \sqformat \spriority9 heading 4;}{\s5\ql \li0\ri0\sb240\sa80\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs22\alang1025 
\ltrch\fcs0 \fs22\cf20\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 \sbasedon0 \snext0 \ssemihidden \sunhideused \sqformat \spriority9 heading 5;}{\s6\ql \li0\ri0\sb240\sa80\sl276\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel5\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs22\alang1025 \ltrch\fcs0 \i\fs22\cf20\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 
\sbasedon0 \snext0 \ssemihidden \sunhideused \sqformat \spriority9 heading 6;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs22\alang1025 \ltrch\fcs0 \fs22\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 \snext11 \ssemihidden \sunhideused Normal Table;}{
\s15\ql \li0\ri0\sa60\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs52\alang1025 \ltrch\fcs0 \fs52\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 
\sbasedon0 \snext0 \sqformat \spriority10 Title;}{\s16\ql \li0\ri0\sa320\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs30\alang1025 \ltrch\fcs0 
\fs30\cf20\lang9\langfe1033\loch\f1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 \sbasedon0 \snext0 \sqformat \spriority11 Subtitle;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid2325030\rsid12915328}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0
\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author Richard Wai}{\operator Richard Wai}{\creatim\yr2022\mo2\dy2\hr22\min14}{\revtim\yr2022\mo2\dy2\hr22\min14}{\version2}{\edmins0}{\nofpages41}{\nofwords11885}{\nofchars67745}
{\nofcharsws79472}{\vern41}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1\noxlattoyen
\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1440\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot2325030\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\pgnrestart\linex0\endnhere\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}
{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar
\s15\ql \li0\ri0\sa60\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs52\alang1025 \ltrch\fcs0 \fs52\lang9\langfe1033\loch\af1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 {\rtlch\fcs1 
\af1 \ltrch\fcs0 \insrsid5855924 {\*\bkmkstart\bkmkcolf0\bkmkcoll1 _5k6qryn5bl6v}\hich\af1\dbch\af1\loch\f1 AI12-0016-1}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }\pard\plain \ltrpar\ql \li0\ri0\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af1\afs22\alang1025 \ltrch\fcs0 \fs22\lang9\langfe1033\loch\af1\hich\af1\dbch\af1\cgrid\langnp9\langfenp1033 {\rtlch\fcs1 
\af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !standard 3.10.2(22)                             13-04-22    AI12-0016-1/02}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !class binding interpretation 11-12-30}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !status work item 11-11-13}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !status received 11-07-28}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !priority Medium}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !difficulty Hard}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !subject Implementation model of dynamic accessibility checking}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !summary}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The implementation model of dynamic accessibility checking given in the AARM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 is inadequate. It is proven by [Baird, Brukardt; 201x] that dynamic accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 checking as defined by\hich\af1\dbch\af1\loch\f1  the Standard is implementable without excessive overhead.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 That model is too complex for the AARM, thus the associated notes are deleted.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !question}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The AARM provides a suggested implementation model for dynamic accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 checking in the Implmentation\hich\af1\dbch\af1\loch\f1  Note beginning with AARM 3.10.2(22.u). However,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 this model alone is not enough to correctly implement Ada 2005, and Ada 2012}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 makes this even less true.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Is the intent that the "small integer" model of dynamic accessibility is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 no longer enough? (Yes.) If s\hich\af1\dbch\af1\loch\f1 o, the AARM notes should be updated to provide}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 a realistic model.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !recommendation}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (See summary.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !wording}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Modify 3.10.2(22.w/2):}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 \hich\f1 The \'93\loch\f1 \hich\f1 obvious\'94\loch\f1  implementation of the run-time checks would be inefficient, and would}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 involve distributed overhead; [therefore, an efficient method is given below]}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \{\hich\af1\dbch\af1\loch\f1 fortunately, more efficient methods are described in [Baird,Brukardt;2019]\}.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 <Editor's note:\hich\af1\dbch\af1\loch\f1  The citation in the square brackets will change to reflect the actual}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 paper once it is published. I hope Steve is joking with the included date. :-)>}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Delete 3.10.2(22.x-22.ff). [These described the "small integer" implementation.]}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !discussion}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Problems \hich\af1\dbch\af1\loch\f1 with the the "small integer" model for representing accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 levels and performing run-time accessibility checking have been identified (see}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 mail message of July 28, 2011, previously filed in this AI). This is a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 description of a more general implement\hich\af1\dbch\af1\loch\f1 ation approach which addresses these}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 problems without introducing unacceptable costs in space, time, or complexity.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 This is only intended to demonstrate that at least one viable implementation}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 model exists and to make this available to language implementor\hich\af1\dbch\af1\loch\f1 s as an option.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 It is not intended to introduce any language changes, but rather to offer one}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 way of meeting the requirements that are already implicit in the language}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 definition.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 It may be that language changes in this area are needed. "Master-based"}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 accessibility checking (see the accept_statement example and the discussion of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 incomparable accessibility levels in AI05-0024) may require wording changes to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 address scenarios involving incomparable accessibility levels (i.e., unequal}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 levels, neither of wh\hich\af1\dbch\af1\loch\f1 ich is "deeper" than the other). For example, the check}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 associated with an access type conversion is defined by}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    "For an access-to-object type, a check is made that the accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     level of the operand type is not deeper than that of the target}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     type, ...".}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 If it is somehow possible that the two accessibility levels mentioned above}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 might be incomparable then we would want the run-time check to fail in this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 case; with the current wording, the check would pass. Such RM wording changes}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 are outsid\hich\af1\dbch\af1\loch\f1 e the scope of this discussion, except that it is intended that the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementation model described herein would be compatible with such changes.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 We describe the proposal in the "software present tense", as a fait accompli.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The accessibility level of a ma\hich\af1\dbch\af1\loch\f1 ster is represented at run-time by a pointer to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 an object whose lifetime is that of the master. For example, if the master is an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 execution of a subprogram body, then the object would be declared (implicitly,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 by the compiler) within the subprogram.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 For the\hich\af1\dbch\af1\loch\f1  following example}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure P1 (X : access Integer) is ... ;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure P2 is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         Local : aliased Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         P1 (Local'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the implicit parameter passed to P1 to describe X's accessibility level might be}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implemented by something like}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure P2 is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         P2_Level : aliased constant Level_Object := ... ;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         Local : aliased Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         P1 (..., P2_L\hich\af1\dbch\af1\loch\f1 evel'Unchecked_Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 So what does this type Level_Object look like?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Given two accessibility levels A and B, the fundamental operation that must be}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 supported is answering the question "might an entity whose accessibility level}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 is A outlive one whose le\hich\af1\dbch\af1\loch\f1 vel is B?". Fortunately, it is not necessary to support}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 this query for an arbitrary pair of accessibility levels; an implementation can}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 take advantage of knowledge about the domain of this query. A query at some}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 point in the execution of a program can only\hich\af1\dbch\af1\loch\f1  involve levels that are directly}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 visible or somehow indirectly reachable at that point.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 To illustrate this point, let's first consider an implementation which would}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 suffice to implement Ada 95 (but not, as it turns out, Ada 2005 or Ada 2012).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Note that t\hich\af1\dbch\af1\loch\f1 he small integer model also suffices for implementing Ada 95, so this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 initial implementation is really only useful as an expository stepping stone}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 towards a more expressive implementation which does support Ada 2005 and Ada}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 2012.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The Ada-95-only implement\hich\af1\dbch\af1\loch\f1 ation:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     For each master whose level needs to be represented at run-time}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     (e.g., because a reference to a local variable is passed as an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     actual parameter where the corresponding formal is of an anonymous}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     access type, as in procedure P2 in the example above), a local}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     aliased constant of type Level_Object_95 is declared. The type is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     declared as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        type Level_Object_95;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1   \hich\af1\dbch\af1\loch\f1      type Level_95 is access constant Level_Object_95;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        type Level_Object_95 is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          record}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            Static_Link : Level_95;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          end record;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 A single constant of type Level_Object_95 is declared at library level:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Library_Level_Object_95 : aliased constant Level_Object_95}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       := (Static_Link => null);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Library_Level_95 : constant Level_95}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       := Library_Level_Object_95'Access;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 All ot\hich\af1\dbch\af1\loch\f1 her objects of type Level_Object_95 are aliased constants declared in more}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 nested scopes and containing pointers to the level object for the corresponding}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 elaboration of the nearest (statically) enclosing scope which has a level}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 object. This corresponds ro\hich\af1\dbch\af1\loch\f1 ughly to the "static link" mechanism traditionally}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 used for implementing up-level references. To determine whether level A is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 deeper than level B, one traverses links starting at A until either B or null is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 encountered (the former indicating A is deeper th\hich\af1\dbch\af1\loch\f1 an B, the latter indicating}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 otherwise; a level is, by definition, not deeper than itself so the A = B case}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 must also be handled correctly).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The following example (which involves an anonymous access-to-subprogram type,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 not an Ada 95 feature) demonstrates that this approach, at least as described so}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 far, doesn't handle some Ada 2012 constructs:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    procedure Accessibility_Test is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure Call_Proc}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        (Proc : not null access procedure (X, Y : access Integer);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1   \hich\af1\dbch\af1\loch\f1       X, Y : access Integer) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          Local : aliased Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          if X = null then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             Proc.all (Local'Access, Y);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          else}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             Proc.all (X, Local'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      end;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure P1 is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          p\hich\af1\dbch\af1\loch\f1 rocedure P2 (X, Y : access Integer) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              type Ref is access all Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              for Ref'Storage_Size use 0;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              Ptr : Ref;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              procedure P3 (X, Y : access Integer) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                  Ptr := Ref (X); -\hich\af1\dbch\af1\loch\f1 - OK (1)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                  begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                      Ptr := Ref (Y); -- raises Program_Error (2)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                  exception}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                      when Program_Error =>}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                          null;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                  end;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                  pragma Assert (Ptr /= Y);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              end;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             Call_Proc (P3'Access, X, null);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          end;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         Call_Proc (P2'Access, null, null);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      end;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      P1;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    end;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Let's look at how this model breaks down in the case of this example.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 When P3 is called, the call stack is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     P3}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Call_Proc}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     P2}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Call_Proc}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     P1}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Accessibility_Test}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The two accessibility levels passed into P3 correspond to the two calls to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 C\hich\af1\dbch\af1\loch\f1 all_Proc. One of these two levels is longer lived than the level of the call to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 P2 (which is also the level of Ref, the target type of the access type}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 conversions) and one of them is shorter-lived, but this essential distinction is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 lost. The first access t\hich\af1\dbch\af1\loch\f1 ype conversion should succeed and the second should}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 fail, but there is insufficient information to make this distinction.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 So now we take the view that the "static link" is just one example (albeit, the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 most important one) of a level whose lifetime is known to be longer than that of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 a given level for which we are declaring the level object. In the case of a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 subprogram which ha\hich\af1\dbch\af1\loch\f1 s an anonymous access-to-object parameter, for example, the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 level of the parameter (which is passed in) is also known to have this property.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 For a class-wide parameter, the level of the underlying specific type of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameter is another such "known to ou\hich\af1\dbch\af1\loch\f1 tlive me" level. For a build-in-place}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 function or a function with an anonymous access result type, the level}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 determined at the point of call is another.  The point is that a set of such}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 "predecessor" levels can be determined by combining the static-link wi\hich\af1\dbch\af1\loch\f1 th other}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 levels extracted (extraction details TBD) from the parameters. The idea is that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 at the time of a subprogram call, the only existing levels that the callee will}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 need to refer to are those that are reachable via an uplevel reference to an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 enclosing \hich\af1\dbch\af1\loch\f1 scope combined with those that are somehow passed in as parameters}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (this includes things like the accessibility level of the underlying specific}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 type of a tagged parameter, not just simple cases like anonymous}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 access-to-object typed parameters; note that f\hich\af1\dbch\af1\loch\f1 or most implementations this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 particular example probably means that the descriptor for specific tagged type}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 will contain the pointer value representing its accessibility level).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 This suggests something like}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        type Level_Object;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        type Level is \hich\af1\dbch\af1\loch\f1 access constant Level_Object with Storage_Size => 0;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        type Level_Vector is array (Positive range <>) of Level;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        type Level_Object (Predecessor_Count : Natural) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          record}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            Predecessors : Level_Vector (1 .. Predecessor_Count);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          end record;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        Library_Level_Object : aliased constant Level_Object}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          := (Predecessor_Count => 0);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        Library_Level : constant Level := Library_Level_Object'Access;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 In our example above, the two level objects declared locally to the two}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 invocations of Call_Proc would now capture the needed distinction by}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 incorporating the levels of their parameters\hich\af1\dbch\af1\loch\f1 . See the "gory details" section}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 below for a detailed explanation of how this is accomplished. It would also be}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 instructive (I imagine) to look at the examples given in the initial AI}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 discussion (in particular, procedures Ada05_Example and Access_Result_Te\hich\af1\dbch\af1\loch\f1 st)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 which illustrate cases that the small integer model cannot handle and to work}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 through how these cases work with the proposed model (Note: I have not actually}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 had time to do this yet, but that doesn't stop me from recommending this action}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 to others).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 T\hich\af1\dbch\af1\loch\f1 his raises performance questions. To decide whether level A is at least as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 long-lived as level B, we need to traverse B's known predecessors, just as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 before, but now this involves traversing a DAG instead of a linked list. Can}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 this be done cheaply enough?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 One answer to that is to store the "static link" in the first element of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Predecessors array and to optimize for the case where the Ada-95-style}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 representation described above would have sufficed to determine that the check}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 would pass. We certainly don\hich\af1\dbch\af1\loch\f1 't care about performance in the case where the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 check will fail; it might be that we also don't care very much about performance}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 in the corner cases where this richer data structure (i.e., multiple}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 predecessors) is needed to get the right answer.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Is it worthwhile to try to avoid adding redundant predecessors to a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Level_Vector? Consider the case of a subprogram which takes an access parameter}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 when the parameter happens to be null (or a pointer to an object declared at}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 library level). If redundant pr\hich\af1\dbch\af1\loch\f1 edecessors are always filtered out, then we are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 talking about traversing a tree instead of a DAG.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 We still have the important optimization that no level object is declared for a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 master that doesn't need one. In particular, wrappers don't declare level}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 obj\hich\af1\dbch\af1\loch\f1 ects.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The details of how we extract predecessor information from a routine's}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameters when building a level object have been glossed over here. Some}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 thought is needed here (e.g., are there cases where a parameter of a specific}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 tagged type requires extra\hich\af1\dbch\af1\loch\f1 cting the accessibility level of the underlying type}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 of the actual and incorporating that into the predecessor set of the callee?).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Note, however, that the rest of the model is not particularly sensitive to these}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 details.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ====}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Gory details (as promised a\hich\af1\dbch\af1\loch\f1 bove):}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 When P3 is called, the call stack is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     P3}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Call_Proc - second call}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     P2}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Call_Proc - first call}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     P1}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Accessibility_Test}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The only masters in this example (besides the library_level master) are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 subprogram body executions, so there are at most 7 accessibility level objects}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 to worry about. In fact, the procedures Accessibility_Test, P1, and P3 do not}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 require level objects, so there are only 4.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 When P1 calls Call_Proc, it has to pass in two accessibility levels for the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameters X and Y. Because it is passing in "null" value\hich\af1\dbch\af1\loch\f1 s, it passes in the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 library level.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Inside this (i.e., the first) call to Call_Proc, Call_Proc builds its local}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 level object. Let's ignore the access-to-subprogram parameter for now and also}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 assume that we are not going to perform any filtering at this poi\hich\af1\dbch\af1\loch\f1 nt to weed out}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 predecessors which contribute no new information. So the object declaration}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 might be implemented as something like}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Level : aliased constant Level_Object :=}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       (Predecessor_Count => 3,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        Predecessors =>}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          (Library_Level, X\hich\af1\dbch\af1\loch\f1 'Accessibility_Level, Y'Accessibility_Level));}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 In this case, X'Accessibility_Level and Y'Accessibility_Level both yield}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Library_Level, so we get three copies of the same dependency. To recap:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Call_Proc_Call_1.Level_Object = (3, (1..3 => Library_Level\hich\af1\dbch\af1\loch\f1 ))}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Call Proc then calls P2, passing in Call_Proc_Call_1.Level_Object'Access as the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 accessibility level for X and passing along Library_Level as the accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 level for Y.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 P2, upon being called, builds its local level object in much the same way that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Call_Proc did, ending up with}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     P2.Level_Object = (3, (Library_Level,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                            Call_Proc_Call_1.Level_Object'Access,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                            Library_Leve\hich\af1\dbch\af1\loch\f1 l));}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 P2 then calls Call_Proc, passing along Call_Proc_Call_1.Level_Object'Access as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the accessibility level for X and passing in Library_Level as the level for Y.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Call_Proc, upon being called again, builds its local level object, ending up}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 with}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Call_\hich\af1\dbch\af1\loch\f1 Proc_Call_2.Level_Object = (3, (Library_Level,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                                          Call_Proc_Call_1.Level_Object'Access,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                                          Library_Level));}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Call Proc then calls P3, passing along Call_Proc_Call_1.Level_Object'Ac\hich\af1\dbch\af1\loch\f1 cess as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the accessibility level for X and passing in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Call_Proc_Call_2.Level_Object'Access as the accessibility level for Y.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 P3 now performs two accessibility checks. For the first access type conversion,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 it compares the accessibility level for X (which is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Call_Proc_Call_1.Level_Object'Access) to that of the access type Ref (which is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 P2.Level_Object'Access) so see if X is sufficiently long-lived. The answer is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 yes, because X's level is a predecessor of Ref's, and the check passes as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 desired.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 For the second access type conversion, the accessibility level of Y is used in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 place of X's. The accessibility level of Y is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Call_Proc_Call_2.Level_Object'Access, which is nowhere to be found in a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 predecessor traversal starting from Ref's level. Thus, the \hich\af1\dbch\af1\loch\f1 check fails as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 desired.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !ACATS test}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 No ACATS tests are needed for this specifically, although tests for many dynamic}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 accessibility checks should include examples like those in these above descriptions.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !ASIS}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 This has no effect on the normative standard, so it has no effect on ASIS, either.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 !appendix}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Steve Baird}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thursday, July 28, 2011  12:25 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The AARM provides a suggested implementation model for dynamic accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 checking in the Implmenta\hich\af1\dbch\af1\loch\f1 tion Note beginning with AARM 3.10.2(22.u). It appears}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 that Ada05 introduced some constructs which require modifying this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementation model. Further modifications appear to be needed in order to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implement Ada2012.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 At the very least, it appears that the\hich\af1\dbch\af1\loch\f1  AARM's description of the intended}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementation model needs to be updated; the ARG may decide that other actions}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 are needed if it is determined that the language as currently defined is too}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 difficult/expensive to implement.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 First, a review of the currently suggested implementation model, unchanged since}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Ada95.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ===========}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Begin recap}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ===========}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Terminology:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    For purposes of this discussion, I'll use the term "scope" or}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    "dynamic scope\hich\af1\dbch\af1\loch\f1 " to indicate a particular elaboration of a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    lifetime-bounding constuct such as a subprogram body or a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    block statement. In this discussion (which is not about}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    static semantics), a package does not introduce a new scope.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    One dynamic scope is "en\hich\af1\dbch\af1\loch\f1 closed" or "statically enclosed" by another}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    if locals of the enclsoing scope are directly accessible (via}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    uplevel referencing) from within the inner scope. To emphasize,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    this is not a relationship between static entities such as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    subprogram bodi\hich\af1\dbch\af1\loch\f1 es. If a subprogram is statically declared within}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    another, there exists (at runtime) exactly one invocation of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    outsr subprogram which "statically encloses" a given invocation of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    the inner subprogram.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    "Library level" is also considered to b\hich\af1\dbch\af1\loch\f1 e a scope. The}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    library-level scope statically encloses all other scopes.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Associated with a parameter of an anonymous access type is a Natural-valued}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implicitly-generated implementation-level parameter.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 If the given callable construct is nested within N enclosing dynamic scopes (for}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 example, N would be zero for a subprogram declared at library level), this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameter (call it P) is intepreted by the cal\hich\af1\dbch\af1\loch\f1 lee as follows:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      0 ..N - the accessibility level of the designated object is that of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        the Pth statically enclosing scope (zero indicates library-level).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      N+1 .. Integer'Last -}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        None of the above. The accessibility level of the designa\hich\af1\dbch\af1\loch\f1 ted}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        object corresponds to some scope which does not statically}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        enclose the scope of the callee. The accessibility level of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        the designated object is treated in this case as if it}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        matched that of the locals of the callee.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 This ap\hich\af1\dbch\af1\loch\f1 proach relies on two assumptions:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     - a caller is able to easily pass in these values; and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     - these values provide anough information for the callee to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       easily perform any required dynamic accessibility checks.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 We shall see (below) that changes introduced in Ada05 violate the first}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 assumption and changes introduced in Ada2012 violate the second.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Values greater than N+1 are allowed and treated as be\hich\af1\dbch\af1\loch\f1 ing equivalent in every way}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 to a value of N+1. This is needed in order to implement calls through an access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 to subprogram value where the called subprogram is declared in a less nested}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 scope than the access-to-subprogram type, as in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure Global (X : access Integer) is ... end P1;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure Foo is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          procedure Bar is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              Local_Var : aliased Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              type Local_Ref is access procedure (X : access Integer);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              Ptr : Ref := Global'Acc\hich\af1\dbch\af1\loch\f1 ess;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1              Ptr.all (X => Local_Var'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Because Ptr might designate a subprogram declared inside of Foo, a level of 2}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 must be passed in even though procedure Global will treat all values greater}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 than 0 identicall\hich\af1\dbch\af1\loch\f1 y.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Note that care must be taken in implementing the rule that a value greater than}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 N+1 must be treated tha same as N+1 when calling a nested subprogram, as in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       procedure Global (X1 : access Integer) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           type Ref is access all Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      \hich\af1\dbch\af1\loch\f1      Ptr : Ref;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           procedure Local (X2 : access Integer) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               Ptr := Ref (X2); -- should pass runtime check}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           end Local;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           Local (X2 => X1);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 If Global is passed the value 2 and simply passes it along to Local without}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 modification, the accessibilty check associated with the type conversion inside}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Local may incorrectly raise Program_Error.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 One way (albeit perhaps not the most efficient way) to h\hich\af1\dbch\af1\loch\f1 andle this is for a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 callee to "normalize" any access levels that it is passed by "min"-ing them with}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the (statically known) accessibility level of the callee's locals. In the above}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 example, this would cause Global to pass Local a value of 1 instead of 2 an\hich\af1\dbch\af1\loch\f1 d all}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 is well. Wrappers for access-to-subprogram callees would be another approach}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (although this seems like it would be overkill in most situations).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Normalization of the actual parameter at the point of a call which needs it}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 might be a practical solution.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 =========}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 End recap}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 =========}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Ada05 introduced nested extensions (AI95-00344) and anonymous access to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 subprogram types (AI95-00254; thanks to Tucker for pointing out this aspect of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the problem).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Either of these introduces the possibility of a call where there is inadequate}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 statically-known information about the enclosing scope of the callee. In Ada95,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the scope of the callee was always known (even for a dispatching call) except in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the case of a ca\hich\af1\dbch\af1\loch\f1 ll through an access to subprogram value. In that case, the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 scope of the access-to-subprogram type declaration could be used instead and all}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 was well.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Consider the case of an Ada05 dispatching call or call through a value of an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 anonymous access-to-subprogram type, where the callee takes a parameter of an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 anonymous access type, as in:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure Outer is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          X : aliased Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          proced\hich\af1\dbch\af1\loch\f1 ure Inner}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            (Ref : access procedure (Xx : aliased Integer)) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             Ref.all (Xx => X'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The crux of the problem is that the caller knows what scope X is declared in,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 but doesn't know which Integer value would represent\hich\af1\dbch\af1\loch\f1  that scope to the callee.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 If the callee is declared somewhere within the same invocation of Foo which}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 statically encloses the invocation of Bar, then the value 1 should be passed in.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Otherwise, the value Integer'Last would be a good choice.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 For the sake\hich\af1\dbch\af1\loch\f1  of specificity, consider the following example:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    procedure Ada05_Example is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      package Root_Pkg is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          type Root is abstract tagged null record;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          procedure Prim_Op (Xxx : Root;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                             Yyy : access Integer) is abstra\hich\af1\dbch\af1\loch\f1 ct;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      end Root_Pkg;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      procedure Proc (Root_Ref : access Root_Pkg.Root'Class) Is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         type Int_Ref is access all Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         Int_Ptr : Int_Ref;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         Int_Var : aliased Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         package Ext_Pkg is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            type Ext is new Root_Pkg.Root with null record;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            procedure Prim_Op (Xxx : Ext; Yyy : access Integer);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         end Ext_Pkg;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         package body Ext_Pkg is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            procedure Prim_Op (Xxx : Ext; Yyy : access Integer) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            be\hich\af1\dbch\af1\loch\f1 gin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                Int_Ptr := Int_Ref (Yyy);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            end Prim_Op;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         end Ext_Pkg;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         Ext_Var : aliased Ext_Pkg.Ext;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         Refs : constant array (Boolean) of access Root_Pkg.Root'Class}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           := (Ext_Var'Access, Root_Ref);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1   \hich\af1\dbch\af1\loch\f1       if Root_Ref = null then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             Proc (Ext_Var'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             -- If Int_Ptr is not null at this point,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             -- then it is a dangling reference to an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             -- elaboration of Int_Var which no longer exists}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             -- as a result of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         else}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             for Exception_Expected in Boolean loop}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                 declare}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                     Test_Failed_1, Test_Failed_2 : exception;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               \hich\af1\dbch\af1\loch\f1   begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                     Root_Pkg.Prim_Op (Refs (Exception_Expected).all,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                                       Int_Var'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                     if Exception_Expected thepn}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                         raise Test_Failed_1;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                     end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    \hich\af1\dbch\af1\loch\f1              exception}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                     when Program_Error =>}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                         if not Exception_Expected then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                             raise Test_Failed_2;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                         end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                 end;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1             end loop;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1         end \hich\af1\dbch\af1\loch\f1 if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      end Proc;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      Proc (null);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    end Ada05_Example;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 While analyzing this example, Tucker wrote (in private}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 communication) the following description of its execution:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    The basic point is that there are three levels here, the level of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    Root_Pkg, the level of the outer call on Proc,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    and the level of the recursive call on Proc.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    The recursive call is passed an Ext_Var object from}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    the outer call.  Inside the rec\hich\af1\dbch\af1\loch\f1 ursive call,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    it calls the Prim_Op operation on this outer}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    Ext_Var object, passing it a local Int_Var'Access.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    That Prim_Op operation stores Int_Var'Access into}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    its (outer) Int_Ptr and returns.  The conversion}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    to Int_Ref is supposed to catch t\hich\af1\dbch\af1\loch\f1 his.  But at}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    the point of call, it thinks it is calling a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    Root_Pkg-level operation, when in fact it is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    calling something much more deeply nested.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I added something like}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     We call Prim_Op in a loop which is executed twice.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     The first time, w\hich\af1\dbch\af1\loch\f1 e need to pass in the value 2.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Ext_Var is declared in the "right" elaboration of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Proc's decl list (i.e., the one which elaborated the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Prim_Op which is being called). The second time}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     we need to pass in a value of 3 or more because}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     (ultim\hich\af1\dbch\af1\loch\f1 ately) we are passing in a reference to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     a declaration of Ext_Var declared in a "wrong"}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     elaboration of Proc.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Tucker also pointed out that anonymous access-to-subprogram parameter types can}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 be used to demonstrate the same problem, as in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    package body Pkg is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       procedure Plum(P : access procedure(X : access T)) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            type T_Ref is access all T;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            T_Ptr : T_Ref;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            T_Var : aliased T;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            procedure Nested(X : access T) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                T_Ptr := T_Ref(X);  --\hich\af1\dbch\af1\loch\f1  Checks level of X against T_Ref}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            end Nested;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            if P = null then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                 Plum(Nested'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            else}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                 P.all(T_Var'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       end Plum;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       Plum(null);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    end P\hich\af1\dbch\af1\loch\f1 kg;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Consider a case (such as the Outer/Inner example above) where the caller knows}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 what scope he wants to represent to the callee, but doesn't know what Integer}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 value to use to represent it. A "none of the above" value (e.g., Integer'Last)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 should be used \hich\af1\dbch\af1\loch\f1 if and only if the the scope that is to be represented will not}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 statically enclose the scope of the callee (once the callee is called).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 If the caller had some mechanism for determining whether the callee's set of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 enclosing scopes includes the "dynamic scope" mentioned above, then the caller}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 could conditionally pass in Integer'Last as appropriate and all would be well.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Such a mechanism cou\hich\af1\dbch\af1\loch\f1 ld certainly be invented, but it might be quite "heavy",}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 perhaps involving distributed overhead. One would like to extract the static}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 link of the callee (before the call) and then traverse static links, looking for}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the scope in question; then pass in Integ\hich\af1\dbch\af1\loch\f1 er'Last if and only if the scope is not}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 found. Given FE/BE boundaries, IL and VM interfaces, and optimizations such as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 inlining, subprogram hoisting, and static link elimination, this kind of static}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 link manipulation may turn out to be unimplementable, or \hich\af1\dbch\af1\loch\f1 at least impractical.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 FE-generated data structures of some sort may be required.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 On the other hand, perhaps some such mechanism is also needed for master-based}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (as opposed to static accessibility level based) accessibility checks. See}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 AI05-0024, particula\hich\af1\dbch\af1\loch\f1 rly the example involving an accept statement.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Another approach would be to have the caller pass in both an Integer value}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (needed for cheap comparisons) and some indication (conceptually, something like}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 a frame pointer) of the scope that Integer value is \hich\af1\dbch\af1\loch\f1 intended to represent; the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 callee could then compare that second value with the scope the Integer value}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 represents to the callee and substitute Integer'Last if the two values don't}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 match.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 In any case, the current AARM description makes no mention of this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementation issue.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 On to Ada2012.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The second assumption mentioned above that this whole implementation model rests}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 upon is that there is no need to distinguish between two distinct members of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 set of scopes that are represented by a "none of the above" value passed in as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 part of some call.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Ada2012 (AI05-0234) changed the semantics anonymous access function result t\hich\af1\dbch\af1\loch\f1 ypes}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 which return an allocator so that the accessibility level of the allocated}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 object is "determined by the point of call".}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Consider an Ada2012 function which}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     1) has an anonymous access result type whose designated type}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        has an access Integer d\hich\af1\dbch\af1\loch\f1 iscriminant; and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     2) takes an "access Integer" parameter; and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     3) returns an allocator as follows:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            new Discriminated (Discrim => Access_Param);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Consider further the case where the two accessibility values that are passed in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (one for the a\hich\af1\dbch\af1\loch\f1 ccess parameter, one for the function result type level}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 "determined by the point of call") are both Integer'Last or some other "none of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the above" value.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 There isn't enough info here to determine whether the allocator should succeed.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 We need to know about\hich\af1\dbch\af1\loch\f1  the relationship between the two "none of the above"}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 scopes, and we don't.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 To be specific, consider the following example:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1    procedure Access_Result_Test is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        procedure Assert (Condition : Boolean) is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            Test_Failed : exception;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            if not Condition then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                raise Test_Failed;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        end Assert;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        subtype Designated is Integer;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        type D\hich\af1\dbch\af1\loch\f1 iscriminated (D1, D2 : access Designated) is null record;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        function Make (Arg1, Arg2 : access Designated;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                       Flag : Boolean := False)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          return access Discriminated is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            Local1, Local2 : aliased Designated := 123;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            type Named is access all Discriminated;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            Named_Var : Named;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1        begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1            if Arg1 /= null and Arg2 /= null then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                return new Discriminated (D1 => Arg1, D2 => Arg2);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                --}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                -- evaluation\hich\af1\dbch\af1\loch\f1  of this allocator includes, among}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                -- other things, accessibility checks for the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                -- two discriminant values,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           elsif Arg1 /= null then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               return Make (Arg1, Local2'Access);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           elsif Flag then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               Named_Var := Named (Make (Local1'Access, Local2'Access));}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               -- should not raise P_E}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           else}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               Named_Var := Named (Make (Local1'Access, null));}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               -- allocator should raise P_E}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           Named_Var.D2.all := 456; -- D2 must not be dangling here}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           Assert (Local1 + Local2 = 579);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           return nu\hich\af1\dbch\af1\loch\f1 ll;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       end Make;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1   begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       for Flag in Boolean loop}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               Assert ((Make (null, null, Flag) = null) and then Flag);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           exception}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               when Program_Error =>}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                   Assert (not Flag);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           end;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1  \hich\af1\dbch\af1\loch\f1      end loop;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1   end Access_Result_Test;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Similar examples can be constructed which do not involve allocators or anonymous}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 access function results. Consider:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     function Make (X : access Integer) return Discriminated is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     begin}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       return Discriminated'(Discrim => X, ...);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 An accessibility check is required in order to ensure that X does not designate}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 something whose accessibility level is more deeply nes\hich\af1\dbch\af1\loch\f1 ted than the level}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 determined by the point of call. AI05-0234's "determined by the point of call"}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 rule seems to be at the heart of this issue.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 All of the examples given in this entire discussion seem very contrived.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Perhaps a legality rule could be found \hich\af1\dbch\af1\loch\f1 which would disallow the cases which}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 introduce these problems without rejecting cases that come up in practice. This}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 may be worth pursuing.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Even if we wanted to classify these cases as erroneous (which I think would be a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 bad idea), we would still need a p\hich\af1\dbch\af1\loch\f1 recise definition of what it is that is being}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 defined to be erroneous.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Thoughts?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thursday, July 28, 2011  1:15 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (1) Your mind sure is twisted. :-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (2) Accessibility checks for objects aren't worth the headaches. I've only once}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     written code where 'Access could even be used, otherwise I've always had to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     turn them off by using 'Unchecked_Access and do my own management. So what's}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     the point? \hich\af1\dbch\af1\loch\f1 The static checks catch low-hanging fruit, so they're probably}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     worth the effort, but the dynamic checks have huge overhead (getting}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     huge-er!) and provide a "tripping hazard" (as Bob puts it) as much as any}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     help. If you really want to prevent da\hich\af1\dbch\af1\loch\f1 ngling pointers, don't use access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     types, use a container (or some type where the language provides the support}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     for you, like dynamic arrays or mutable records).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (3) A Legality Rule like "no returns of types with access discriminants", or "no}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     declaration of access discriminants", or "no declaration of access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     parameters" probably would help. ;-) But barring that, I don't quite see how}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     you could craft a static rule to deal with things that are fundamentally}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     dynamic (access paramet\hich\af1\dbch\af1\loch\f1 ers, returns of access discriminants, etc.) At best,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     you could reject anything where the scope is unknown at the call site, but I}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     would be very surprised if that didn't scoop up a lot of cases that are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     perfectly fine. Especially as we would hav\hich\af1\dbch\af1\loch\f1 e to assume the worst about}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     T'Class (that it has access discriminants), so such a rule would apply to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     any function returning T'Class. I think you'd end up rejecting almost all}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     calls that had an access parameter and returned T'Class -- that's no\hich\af1\dbch\af1\loch\f1 t going}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     to fly. (I've got a lot of those in the Claw Builder. :-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (4) The "simple" implementation model always looked too good to be true, and the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     requirement to do the minimum already showed that it was going to not work}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     in the long run. The \hich\af1\dbch\af1\loch\f1 question I have is whether it is possible to implement}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     any other implementation that works. On a mono-processor or shared memory}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     machine, you could use the stack frame addresses as an indication of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     scope (although compares that are not for equality are problematical, as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     there are multiple task stacks, and they have to be in *some* order in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     memory, such that "<" might succeed even though there is a problem [when}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     multiple tasks are invo\hich\af1\dbch\af1\loch\f1 lved]). If tasks are mapped to different processors}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     with some unshared memory, the problem is harder -- but in that case, one}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     couldn't really create 'Access to unshared memory, so there probably isn't}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     much point in worrying about that.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 So I wo\hich\af1\dbch\af1\loch\f1 uld suggest thinking hard about an implementation model of passing}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 pointers to stack frames as an accessibility indication rather than integers.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (On most machines, that will not change the size passed as parameters anyway.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Why does that not work? (It woul\hich\af1\dbch\af1\loch\f1 dn't surprise me if it didn't, but I'd like to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 know why.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Bob Duff}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thursday, July 28, 2011  1:22 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > At the very least, it appears that the AARM's description of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > intende\hich\af1\dbch\af1\loch\f1 d implementation model needs to be updated; the ARG may decide}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > that other actions are needed if it is determined that the language as}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > currently defined is too difficult/expensive to implement.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 This is an excellent write-up.  For the first time (given \hich\af1\dbch\af1\loch\f1 this write-up, plus}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 our private conversations), I feel like I actually understand what's going on!}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (It won't last -- I'm going to save your email for future reference.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I vote for "too difficult/expensive to implement".}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Maybe we can come up with some compile-time rules that prevent the problems.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 But that may be impossible; the reason we don't know what level to pass will be}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the same reason we don't know that it should be illegal (without forbidding}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 useful stuff).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Or mayb\hich\af1\dbch\af1\loch\f1 e Post-Compilation rules?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Maybe making the run-time checks more conservative would work.  These are all}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 convoluted examples, so maybe we could say "if we don't know what level to pass,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 raise an exception, or in some sense assume the worst".}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 As a last res\hich\af1\dbch\af1\loch\f1 ort, maybe we should make some things erroneous.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 That should be easier to define, because we can depend on global information not}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 available to the compiler. I can rationalize that by saying:  Most access values}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 are used to build heap-allocated data structures, so most dangling pointers are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 caused by premature Unchecked_Deallocation.  The accessibility checks are no}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 help there.  And q\hich\af1\dbch\af1\loch\f1 uite often, when you have pointers to stack-allocated things,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 you need to use 'Unchecked_Access; again, accessibility checks are no help.  So}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 why get excited if the accessibility checks are not 100% bullet-proof? -- it's}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 already the case that they only pre\hich\af1\dbch\af1\loch\f1 vent SOME dangling pointers.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Needs more thought -- I don't have any concrete suggestions right now.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Bob Duff}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thursday, July 28, 2011  1:42 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > (1) Your mind sure is twisted. \hich\af1\dbch\af1\loch\f1 :-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ;-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > (2) Accessibility checks for objects aren't worth the headaches. I've}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > only once written code where 'Access could even be used, otherwise}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > I've always had to turn them off by using 'Unchecked_Access and do my own management.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The GNAT sources contain 305 occurrences of 'Unchecked_Access, and 2409}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 occurrences of 'Access, so "only once" is not a universal experience.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 But I tend to agree with\hich\af1\dbch\af1\loch\f1  your point that making the run-time accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 checks bullet proof is not worth a huge implementation effort.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > (3) A Legality Rule like "no returns of types with access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > discriminants",}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Note that our new syntactic sugar for containers depends heavi\hich\af1\dbch\af1\loch\f1 ly on this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 feature!}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >...or}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > "no declaration of access discriminants", or "no declaration of access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >parameters" probably would help. ;-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 OK, I see the smiley.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 How about "you can't initialize an access discriminant from an access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameter"?  And "you c\hich\af1\dbch\af1\loch\f1 an't return an anonymous access result that comes from an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 access parameter"?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >...But barring that, I don't quite see how  you could craft a static}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >rule to deal with things that are fundamentally  dynamic (access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >parameters, returns of access discriminants, etc.) At best,  you could}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >reject anything where the scope is unknown at the call site, but I}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >would be very surprised if that didn't scoop up a\hich\af1\dbch\af1\loch\f1  lot of cases that are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >perfectly fine. Especially as we would have to assume the worst about}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >T'Class (that it has access discriminants), so such a rule would apply}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >to any function returning T'Class.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 For the same reason, whatever overhead is involved, a\hich\af1\dbch\af1\loch\f1 pplies to any function}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 returning T'Class (hence is distributed overhead).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > So I would suggest thinking hard about an implementation model of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > passing pointers to stack frames as an accessibility indication rather}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > than integers. (On most machines, that\hich\af1\dbch\af1\loch\f1  will not change the size passed}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > as parameters anyway.) Why does that not work? (It wouldn't surprise}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > me if it didn't, but I'd like to know why.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I'm not sure, but it sounds like an implementation earthquake, because in GNAT}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (and I suppose most compil\hich\af1\dbch\af1\loch\f1 ers), only the front end knows about accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 levels, and only the back end knows about static links / frame pointers.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 On the other hand, I suppose you can get at your own frame-pointer-like thing by}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 simply taking 'Address of the first local object (and concoct a zero-sized one}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 if there are none).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Gar\hich\af1\dbch\af1\loch\f1 y Dismukes}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thursday, July 28, 2011  2:03 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > So I would suggest thinking hard about an implementation model of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > passing pointers to stack frames as an accessibility indication}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > rather than integers. (On most machines, that will not change the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > size passed as parameters anyway.) Why does that not work? (It}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > wouldn't surprise me if it didn't, but I'd like to know why.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > I'm not sure, but it sounds like an implementatio\hich\af1\dbch\af1\loch\f1 n earthquake, because}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > in GNAT (and I suppose most compilers), only the front end knows about}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > accessibility levels, and only the back end knows about static links /}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > frame pointers.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Right, I don't think we want to go down that path.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > On the other ha\hich\af1\dbch\af1\loch\f1 nd, I suppose you can get at your own}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > frame-pointer-like thing by simply taking 'Address of the first local}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > object (and concoct a zero-sized one if there are none).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 That occurred to me as well, but I believe that won't work on VM-based}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementations\hich\af1\dbch\af1\loch\f1  such as for JVM (not sure about .NET).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Steve Baird}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thursday, July 28, 2011  2:03 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > This is an excellent write-up.  For the first time (given this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > write-up, plus our priva\hich\af1\dbch\af1\loch\f1 te conversations), I feel like I actually}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > understand what's going on!  (It won't last -- I'm going to save your}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > email for future reference.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Thanks. As you know, it took me a good while before I understood things well}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 enough to produce this write-up. Thanks to you, Gary, and Tuck for helping me}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 get to that point.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Maybe making the run-time checks more conservative would work.  These}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > are all\hich\af1\dbch\af1\loch\f1  convoluted examples, so maybe we could say "if we don't know}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > what level to pass, raise an exception, or in some sense assume the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > worst".}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 That would help with the Ada2012 problem. In implementation terms, a runtime}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 accessibility check would be defined\hich\af1\dbch\af1\loch\f1  to fail if it involves the comparison of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 two "none of the above" values.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > As a last resort, maybe we should make some things erroneous.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > That should be easier to define, because we can depend on global}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > information not available to the compiler.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > I c\hich\af1\dbch\af1\loch\f1 an rationalize that by saying:  Most access values are used to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > build heap-allocated data structures, so most dangling pointers are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > caused by premature Unchecked_Deallocation.  The accessibility checks}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > are no help there.  And quite often, when you hav\hich\af1\dbch\af1\loch\f1 e pointers to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > stack-allocated things, you need to use 'Unchecked_Access; again,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > accessibility checks are no help.  So why get excited if the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > accessibility checks are not 100% bullet-proof? -- it's already the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > case that they only prevent SOME dangling pointers.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 When people use Unchecked_Deallocation or Unchecked_Access, they know that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 avoiding dangling pointers is their own responsibility. The constructs we are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 talking about seem different to me.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I understand the argument that defining the problems away by declaring them to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 be erroneous is ok because nobody in their right mind does any\hich\af1\dbch\af1\loch\f1 thing close to the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 sort of stuff that is in these examples, but this seems like a slippery slope to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 me.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thursday, July 28, 2011  2:58 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > (3) A Legality R\hich\af1\dbch\af1\loch\f1 ule like "no returns of types with access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > discriminants",}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Note that our new syntactic sugar for containers depends heavily on}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > this feature!}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >...or}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > "no declaration of access discriminants", or "no declaration of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >access parameters" proba\hich\af1\dbch\af1\loch\f1 bly would help. ;-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > OK, I see the smiley.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > How about "you can't initialize an access discriminant from an access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > parameter"?  And "you can't return an anonymous access result that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > comes from an access parameter"?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I suspect that people using our new syntactic sugar would do exactly that, if}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 they don't want to use an aliased parameter. At least aliased parameters don't}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 have the different level problem (they are assumed to be the same as the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 return), but I have to won\hich\af1\dbch\af1\loch\f1 der if we wouldn't find a similar problem with them.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 And, of course, I've dubious that that is enough.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >...But barring that, I don't quite see how  you could craft a static}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >rule to deal with things that are fundamentally  dynamic (access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >paramete\hich\af1\dbch\af1\loch\f1 rs, returns of access discriminants, etc.) At best, you could}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >reject anything where the scope is unknown at the call site, but I}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >would be very surprised if that didn't scoop up a lot of cases that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >are perfectly fine. Especially as we would have to\hich\af1\dbch\af1\loch\f1  assume the worst}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >about T'Class (that it has access discriminants), so such a rule}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >would apply to  any function returning T'Class.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > For the same reason, whatever overhead is involved, applies to any}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > function returning T'Class (hence is distribut\hich\af1\dbch\af1\loch\f1 ed overhead).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Right, but we already know that (from AI-51 and AI-234 - in particular, reread}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the Implementation Note 3.10.2(10.d.2-7/3)). There is nothing new about that.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Indeed, that's Tucker's bait-and-switch: when we complained about the overhead}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 of d\hich\af1\dbch\af1\loch\f1 ynamic checks during the design of Ada 2005, he came up with a static model.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 We then agreed to allow these features into Ada 2005 (they would have never made}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 it in otherwise). A few years later, Steve points out problems with the static}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 model, and Tucker announces that we have to use a dynamic model with all of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 overhead that we would never have agreed to for Ada 2005. Nice.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 [Note: I don't think Tucker did this on purpose and don't mean to imply that he}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 did, but the effect was instead of killing the nasty coextension idea}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 immediately and completely, we now have a permanent morass with distributed}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 overhead to boot.]}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > So I w\hich\af1\dbch\af1\loch\f1 ould suggest thinking hard about an implementation model of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > passing pointers to stack frames as an accessibility indication}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > rather than integers. (On most machines, that will not change the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > size passed as parameters anyway.) Why does that not w\hich\af1\dbch\af1\loch\f1 ork? (It}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > wouldn't surprise me if it didn't, but I'd like to know why.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > I'm not sure, but it sounds like an implementation earthquake, because}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > in GNAT (and I suppose most compilers), only the front end knows about}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > accessibility levels, and only \hich\af1\dbch\af1\loch\f1 the back end knows about static links /}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > frame pointers.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 There is no interaction between dynamic and static accessibility levels in this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 model (you would *never* check a static level against a dynamic level, you would}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 always check two dynamic levels or t\hich\af1\dbch\af1\loch\f1 wo static levels), so I don't know why that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 would matter. I do understand that it would take substantial implementation}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 effort (it requires redoing all of the existing dynamic checks at a minimum),}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 but if that would detect *all* of the errors properly *and\hich\af1\dbch\af1\loch\f1 * still be reasonably}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementable, then I think the language should adopt that as the intended}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementation model.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 But I agree that this is a big IF. I wanted to focus thought on whether that IF}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 is true (especially the first part, because it if doesn'\hich\af1\dbch\af1\loch\f1 t detect all of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 errors, it couldn't be worth it). But I do think we want to avoid erroneousness}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 if we can.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 It's clear to me that the "integer level" model is dead, and has never been all}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 that alive (it was a hack at best). So I wanted to look at alternatives; if}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 there is a practical implementation (given a clean slate) that does detects all}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 of the errors and no\hich\af1\dbch\af1\loch\f1 t too much, then we have a very different trade-off than if}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 no such implementation exists.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 So I think we need to find an implementation that would detect all of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 problems and not too much (forget everything that compilers actually are doing}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 for the mom\hich\af1\dbch\af1\loch\f1 ent), so we have a clear idea of how much overhead that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementation causes. Only then can we make an informed decision on whether}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 erroneousness or bizarre restrictions are worthwhile. I surely can't do it now.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (And there is no rush - this is not going i\hich\af1\dbch\af1\loch\f1 nto Ada 2012 in any case.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > On the other hand, I suppose you can get at your own}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > frame-pointer-like thing by simply taking 'Address of the first local}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > object (and concoct a zero-sized one if there are none).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Right. Or something similar. (And I'm not\hich\af1\dbch\af1\loch\f1  sure why you would need a dynamic}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 level if there are no objects or access collections [which require local data}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 structures] -- why would you be comparing it??)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Tucker Taft}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thur\hich\af1\dbch\af1\loch\f1 sday, July 28, 2011  4:09 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I think Randy might be headed the right direction here.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Basically forget the static accessibility approximation in code where there is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 any danger of this sort of nastiness, and go with a true dynamic accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 level.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 My guess is that code with no access parameters/results, no nested extensions,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 no nested access-to-subp types need not worry about these problems.  Hopefully}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 that is mos\hich\af1\dbch\af1\loch\f1 t of the world.  Code that has any of these troublesome features}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 would move toward passing around dynamic accessibility levels/descriptors as an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 additional implicit parameter.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy B\hich\af1\dbch\af1\loch\f1 rukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Thursday, July 28, 2011  7:58 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > How about "you can't initialize an access discriminant from an access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > parameter"?  And "you can't return an anonymous access result that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > comes from an access parameter"?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Those wouldn't work by them\hich\af1\dbch\af1\loch\f1 selves, because you could "launder" an access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameter by storing it in a local SAOAAT. (Stealing Steve's moniker.) Recall}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 that the accessibility of a SAOAAT is the same as the assigned value, including}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 a passed-in parameter. You could also ban access dis\hich\af1\dbch\af1\loch\f1 criminants coming from a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 SAOAAT, but that seems pretty severe; flow analysis of the usage of a SAOAAT}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 surely is more complex than existing legality rules.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 In any case, I'd be suspicious of adopting a complex Legality Rule to ban this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 particular problem case, because I think it is only a matter of time before}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 someone runs into some other combination that's also a problem. We tried that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 strategy with general-access-to-unconstrained, and we plugged a new hole every}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 year until we finally g\hich\af1\dbch\af1\loch\f1 ave up with Ada 2005. (Would this problem come up when a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 generic in out parameter is used as an access discriminant, and the instance is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 local?? Etc.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 P.S. SAOAAT = Stand-Alone Object of an Anonymous Access Type.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 *****************************************\hich\af1\dbch\af1\loch\f1 ***********************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Jean-Pierre Rosen}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Friday, July 29, 2011  6:09 AM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > This is an excellent write-up.  For the first time (given this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > write-up, plus our private conversations), I feel like I actually}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > understand what's going on!  (It w\hich\af1\dbch\af1\loch\f1 on't last -- I'm going to save your}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > email for future reference.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 + 1}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I'll save it, just in case I decide to start a training session "Introduction to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 accessibility levels - 5 days" ;-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From what I understood from the discussions, it seems to me that:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 1) Making it safe is not practically doable}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 2) Restricting to safe cases would be too restrictive.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I don't like the idea of a false feeling of safety. Wouldn't it be possible to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 restrict to safe cases, and have a gateway through some Unchecked gizmo to go\hich\af1\dbch\af1\loch\f1  to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the (necessary) unsafe state?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Bob Duff}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Friday, July 29, 2011  1:28 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > How about "you can't initialize an access discriminant from an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > access parameter"?  And "you can't return an anonymous access result}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > that comes from an access parameter"?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Those wouldn't work by themselves, because you could "launder" an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > ac\hich\af1\dbch\af1\loch\f1 cess parameter by storing it in a local SAOAAT. (Stealing Steve's}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > moniker.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I've always been opposed to using dynamic accessibility levels for SAOOAAAATs}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (however many "A"s it has).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Recall that the accessibility of a SAOAAT is the same as the assigne\hich\af1\dbch\af1\loch\f1 d}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > value, including a passed-in parameter. You could also ban access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > discriminants coming from a SAOAAT, but that seems pretty severe; flow}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > analysis of the usage of a SAOAAT surely is more complex than existing legality rules.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I don't understand.  By\hich\af1\dbch\af1\loch\f1  "severe" do you mean "overly restrictive for the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 programmer"?  I don't mind that -- I've gotten along fine for years without ever}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 using SAOAATs, so I wouldn't mind restricting them in the discrim case.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 But then you say, "; flow...", and I don't see what \hich\af1\dbch\af1\loch\f1 that has to do with being}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 "severe".}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > In any case, I'd be suspicious of adopting a complex Legality Rule to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > ban this particular problem case, because I think it is only a matter}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > of time before someone runs into some other combination that's also a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > problem. We tried that strategy with general-access-to-unconstrained,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > and we plugged a new hole every year until we finally gave up with Ada}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > 2005. (Would this problem come up whe\hich\af1\dbch\af1\loch\f1 n a generic in out parameter is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > used as an access discriminant, and the instance is local?? Etc.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 You're probably right.  But what can we do, other than come up with some rules}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 and hope they're right, and fix them when we notice otherwise?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ************\hich\af1\dbch\af1\loch\f1 ****************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Friday, July 29, 2011  2:07 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > You're probably right.  But what can we do, other than come up with}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > some rules and hope they're right, and fix them when we notice}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > otherw\hich\af1\dbch\af1\loch\f1 ise?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 There are clearly two other choices:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (1) Do nothing - which requires implementations to do it right. So far as I can}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     tell, this is implementable -- it would require changing what compilers}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     currently do, but would not be incompatible or incon\hich\af1\dbch\af1\loch\f1 sistent (you'd get the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     same answer in simple cases).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     I'm rather unsure why this isn't acceptable [it seems to me that has to be}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     done in any case to deal with the "incomparable masters" checks of 4.8 and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     6.5]. New language features are going to break some eggs, and it's fairly}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     clear that Ada 2005 broke a lot of eggs that we didn't realize at the time.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (2) Drop some or a\hich\af1\dbch\af1\loch\f1 ll of the dynamic accessibility checks in favor of leaving the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     associated cases erroneous. That might require some new rules, but they'd be}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     dynamic rules, not Legality Rules, meaning that they wouldn't have all of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     the generic contract complicat\hich\af1\dbch\af1\loch\f1 ions. [And I was *only* speaking about}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     Legality Rules in my previous comment.]}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I strongly prefer "do it right" to the other options -- and I'd like to know if}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 there is any real problem with a purely dynamic dynamic check. (Say using stack}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 frames.) Other than "we don't do it that way now", which is irrelevant if the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 alternatives are erroneousness or a permanent cascade of every more arbitrary}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 and restrictive rule\hich\af1\dbch\af1\loch\f1 s -- both of which are far worse alternatives.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Steve Baird}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Friday, July 29, 2011  6:51 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > There are clearly two other choices: (1) Do nothing - which requires}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > implementatio\hich\af1\dbch\af1\loch\f1 ns to do it right. So far as I can tell, this is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > implementable}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > -- it would require changing what compilers currently do, but would}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > not be incompatible or inconsistent (you'd get the same answer in simple cases).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > I'm rather unsure why this isn't acc\hich\af1\dbch\af1\loch\f1 eptable [it seems to me that has}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > to be done in any case to deal with the "incomparable masters" checks}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > of 4.8 and 6.5].}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I think this is an important point. I'm guessing that you are right that "it has}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 to done" in order to implement the checks you mentioned, but I haven't thought}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 about it enough. If it is true that we already need to develop some more general}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 mechanism in or\hich\af1\dbch\af1\loch\f1 der to handle these accessibility checks (this is what I was}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 talking about in the original message when I referenced AI05-0024), then the "no}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 RM changes - just implement it" solution might become more attractive. Details,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 of course, are needed (particularl\hich\af1\dbch\af1\loch\f1 y about the amount, if any, of distributed}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 overhead).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > ...  -- and I'd like to know}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > if there is any real problem with a purely ... dynamic check. (Say}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > using stack frames.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 As I mentioned in the earlier message, there may be problems with directly}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ac\hich\af1\dbch\af1\loch\f1 cessing the frame pointer. Say the portion of the compiler which knows about}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the dynamic semantics of Ada generates some intermediate representation in which}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 this sort of manipulation cannot be expressed. Or, as I mentioned earlier,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 consider the interactio\hich\af1\dbch\af1\loch\f1 ns with optimizations such as subprogram hoisting,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 inlining, and static link elimination.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 One might give up on accessing the frame pointer directly and instead have the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 aforementioned Ada-knowledgeable part of the compiler generate its own data}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 structure \hich\af1\dbch\af1\loch\f1 to capture the needed information. The compiler generates a small}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 record object in each "interesting" frame containing, say, a  static nesting}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 level and a link to the corresponding object of the nearest statically enclosing}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 frame which has one. This is onl\hich\af1\dbch\af1\loch\f1 y an incomplete sketch of an approach, but this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 is the sort of thing I was talking about in the original message when I said}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 "FE-generated data structures of some sort may be required".}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Friday, July 29, 2011  8:18 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Using a separate data structure automatically means "distributed overhead", of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 course. The stack frame approach is appealing becaus\hich\af1\dbch\af1\loch\f1 e it doesn't have such}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 overhead (we're already creating stack frames).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 OTOH, stack frames probably don't correspond exactly to dynamic masters (masters}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 that are a subprogram call are very unlikely to have a frame of their own, and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 many compilers combine t\hich\af1\dbch\af1\loch\f1 he frames for all blocks into one). But perhaps the data}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 structures associated with finalization of masters could be "borrowed" for this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 purpose (they surely have the correct run-time nesting). There still would be}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 distributed overhead, but it's overhead that already exists and the added}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 overhead would probably be zero in many frames. (Janus/Ada aggressively tries to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 eliminate finalization \hich\af1\dbch\af1\loch\f1 data from frames; that would be somewhat less possible if}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 it also was used for dynamic accessibility checks. Thus there still would be a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 bit of overhead.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Steve Baird}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Friday, No\hich\af1\dbch\af1\loch\f1 vember 30, 2012  7:07 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Thanks to Gary, Bob, and Tuck for much useful discussion and review on this one.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 [Followed by the !discussion of version /01 of this AI.]}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Friday, November 30, 2012  11:20 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Problems with the the "small integer" model for representing}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > accessibility levels and performing run-time accessibility ch\hich\af1\dbch\af1\loch\f1 ecking}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > have been identified (see}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > mail message of July 28, 2011, previously filed in this AI).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 At some point, these problems will have to be put into the body of the AI. An AI}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 is intended to be readable without referring to the e-mail section (it's}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 cus\hich\af1\dbch\af1\loch\f1 tomary for some users to strip that off).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > This is only intended to demonstrate that at least one viable}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > implementation model exists and to make this available to language}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > implementors as an option. It is not intended to introduce any}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > language chan\hich\af1\dbch\af1\loch\f1 ges, but rather to offer one way of meeting the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > requirements that are already implicit in the language definition.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 But we at least need to rewrite the AARM notes to not suggest a model that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 doesn't work. Someone is going to have to take that short stick.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > We describe the proposal in the "software present tense", as a fait}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > accompli.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I presume this means you haven't actually implemented this to see if it works.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 :-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Let's look at how this model breaks down in the case of this example.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > When P3 is called, the call stack is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >     P3}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >     Call_Proc}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >     P2}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >     Call_Proc}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >     P1}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >     Accessibility_Test}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > The two accessibility levels passed into P3 correspond to\hich\af1\dbch\af1\loch\f1  the two}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > calls to Call_Proc. One of these two levels is longer lived than the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > level of the call to P2 (which is also the level of Ref, the target}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > type of the access type conversions) and one of them is shorter-lived,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > but this essential distinction \hich\af1\dbch\af1\loch\f1 is lost. The first access type}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > conversion should succeed and the second should fail, but there is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > insufficient information to make this distinction.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I admit, I lost you completely at this point. I don't have time to work this}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 example through on a whiteboard (which might be the only way to understand it --}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 but I would have expected the two parameters to point at different frames (frame}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 objects) if they \hich\af1\dbch\af1\loch\f1 have a different lifetime. How could it be otherwise here?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Perhaps this has something to do with the "normalization" step of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 small-integer model, which never made sense to me, either. (I know it's been}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 explained to me, but it is so nonsensical that it\hich\af1\dbch\af1\loch\f1  doesn't stick. (Of course, I}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 can't seem to understand how one could make static links work, either [and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 despite repeated attempts to explain it to me], so I'm the wrong person to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 understand such a discussion. Plus I always think about these problems mentally}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 using displays, which might give different results in some of these examples, so}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I might be missing the problem because there isn't one...)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Anyway, I read the rest of this, bu\hich\af1\dbch\af1\loch\f1 t I don't understand the problem very well so}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I can't give any reasonable thoughts on the answer.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Saturday, December  1, 2012  12:14 AM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > I admit, I lost you\hich\af1\dbch\af1\loch\f1  completely at this point. I don't have time to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > work this example through on a whiteboard (which might be the only way}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > to understand it -- but I would have expected the two parameters to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > point at different frames (frame objects) if they have a differ\hich\af1\dbch\af1\loch\f1 ent}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > lifetime. How could it be otherwise here?}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Having been unable to stop thinking about this (instead of doing critical work}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 for the upcoming meeting ;-), I think the problem is that you are trying to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 solve the problem the wrong way. Specifically, dynam\hich\af1\dbch\af1\loch\f1 ic masters are nested}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 dynamically, and their static links are pretty much irrelevant. If you try to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 treat this like the static checks (or the small integer model, for that matter),}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 you are working harder than necessary. So I think your Level_Objects are mu\hich\af1\dbch\af1\loch\f1 ch}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 too complex (and expensive to create).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I believe that there is a simple solution and usually very efficient solution}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 that piggybacks on the finalization chain mechanism. (Of course, if your}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 compiler just spent $$$$ and time to get rid of that, you're going to be out of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 luck, but in any case we're trying to find a simple reference implementation,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 and the RM reference impl\hich\af1\dbch\af1\loch\f1 ementation for finalization uses a chain.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The basic idea is to ensure that the first object in every master is the special}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Level_Object that you described in your paper, and it is linked to the innermost}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 enclosing *dynamically* enclosing master of this f\hich\af1\dbch\af1\loch\f1 rame. (This is dirt cheap in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Janus/Ada because such an object already exists, all I have to do is add the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 pointer into it.) And how do you find that pointer to the enclosing master's}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 level object? The thumb points to it (or immediately before it, I forget)\hich\af1\dbch\af1\loch\f1  when}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 you enter the scope. The finalization setup already has all of the needed}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 information. (This lets us skip levels for which no level object or finalization}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 is needed; nothing bad will happen.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The check is essentially the same as you suggest (run the\hich\af1\dbch\af1\loch\f1  chain looking for the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 frame). Note that if one is willing to have a bit more fixed overhead, and the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 single stack of a task is contiguous, one can stick the current task id into the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Level_Object. In that case, preceding the check with:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      if A.Task_Id = B.Task_Id then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           if A.Link > B.Link then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                -- Error.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           -- else OK.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      else}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1          -- Run chain as before.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1      end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Makes the check dirt cheap unless the levels are from two different task's}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 stacks. (Which should be very rare!) [Although simply special-casing}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 library-level probably is enough to make the checks cheap enough, since the vast}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 majority of types are declared \hich\af1\dbch\af1\loch\f1 at library-level.]}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I'm pretty sure this ought to work for your example (the levels belong to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 different stack frames for the two parameters, and surely cannot be the same in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 this case). Whether it works in all cases is something to think about some other}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 d\hich\af1\dbch\af1\loch\f1 ay.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Now, moving on to critical work...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Bob Duff}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Saturday, December  1, 2012  8:34 AM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >...Specifically, dynamic masters are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > nested dynamically, and their static links are pre\hich\af1\dbch\af1\loch\f1 tty much irrelevant.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I think any method that involves chasing dynamic links will be too inefficient}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 in some cases.  (If my name were Randy, I'd use words like "non-starter".  ;-))}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Imagine a recursive procedure that takes an access parameter.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 You could ea\hich\af1\dbch\af1\loch\f1 sily get thousands of stack frames, and if you have an accessibility}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 check for each call, it's quadratic in the recursion depth.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Static chains, on the other hand, are (approximately) never longer than 3.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 We do indeed need a whiteboard or equivalent to understand this stuff.  I}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 understood it briefly during the meeting with Steve and Tuck, but that was while}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 staring at a picture Steve had drawn.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >      if A.Task_Id = B.Task_Id then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 That's an interesting id\hich\af1\dbch\af1\loch\f1 ea.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Now, moving on to critical work...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 With 2020 still 7 years away, I wouldn't consider anything critical, but yeah,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 OK, get back to work.  ;-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Saturday, Dec\hich\af1\dbch\af1\loch\f1 ember  1, 2012  2:27 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >...Specifically, dynamic masters are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > nested dynamically, and their static links are pretty much irrelevant.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > I think any method that involves chasing dynamic links will be too}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > inefficient in some cases.  (If my name wer\hich\af1\dbch\af1\loch\f1 e Randy, I'd use words like}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > "non-starter".  ;-))}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Imagine a recursive procedure that takes an access parameter.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > You could easily get thousands of stack frames, and if you have an}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > accessibility check for each call, it's quadratic in the recursion}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > depth.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Only if your check is stupid. :-) The only time the check needs to chase}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 anything is if the objects are not library level and are possibly incomparable}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (come from different tasks). I think it would be extremely difficult to create}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 an example like that which was quadratic (I'm sure it would be possible, but}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 surely would be patho\hich\af1\dbch\af1\loch\f1 logical).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Besides that, I personally don't care if it take 6 months to execute a check on}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 a anonymous access parameter. These checks are rare in any case (most such}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameters are just dereferenced which don't require any checks), and they are}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (as one B. \hich\af1\dbch\af1\loch\f1 Duff said) a "tripping hazard" in any case -- I'd hope that the users}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 saw the error of their ways and used "in out" or "aliased in out" or a named}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 access instead (none of which require complex dynamic checks).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > Static chains, on the other hand, are (appr\hich\af1\dbch\af1\loch\f1 oximately) never longer}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > than 3.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 True enough. But if you have as much overhead as in Steve's description to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 *create* those data structures (recall that they're dynamically sized, which in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Janus/Ada would mean heap allocation!) -- and for the vast majorit\hich\af1\dbch\af1\loch\f1 y of anonymous}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 access parameters they'll never be used at all (I've only used anonymous access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 to get "in out reference" parameters on functions, not necessary in Ada 2012 and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 in any case, these never generated any checks). So that overhead is completely}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 w\hich\af1\dbch\af1\loch\f1 asted. Piggybacking on a mechanism that already exists (in Janus/Ada at least)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 has less overhead, and the objects are statically sized.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > We do indeed need a whiteboard or equivalent to understand this stuff.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > I understood it briefly during the meeting w\hich\af1\dbch\af1\loch\f1 ith Steve and Tuck, but}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > that was while staring at a picture Steve had drawn.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > >      if A.Task_Id = B.Task_Id then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > That's an interesting idea.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 It's the only reason that I agreed to "incomparable levels" in the first place}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 -- the check is cheap in all cases except when the levels appear incomparable.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Probably I should repeat the entire check algorithm again (it's in the e-mail of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 the AI for "inco\hich\af1\dbch\af1\loch\f1 mparable levels").}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 When checking that "A shall not be deeper than B, else Program_Error is raised",}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 we ought to do the following:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       if A.Level = Library_Level then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           return; -- OK}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       elsif B.Level = Library_Level then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           raise Progr\hich\af1\dbch\af1\loch\f1 am_Error; -- The case where both levels are library-level is included in the first branch.}{\rtlch\fcs1 \af1 \ltrch\fcs0 
\insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       elsif A.Task_ID = B.Task_Id then -- The levels belong to the same task (this includes both the same level).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           -- We assume that the stack for a single \hich\af1\dbch\af1\loch\f1 task is contiguous.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           if A.Level'Address > B.Level'Address then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               -- The direction ("<" or ">") depends on which way your stacks}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               -- grow in memory.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               raise Program_Error;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           else}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               return; --\hich\af1\dbch\af1\loch\f1  OK.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       else -- Two different tasks (can't be the same level).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           -- A has to be on B's chain.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           Temp := B.Level.Link;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           while Temp /= null loop}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               if Temp = A then}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                    return; -- OK.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               else}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1                  Temp := Temp.Link;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1               end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           end loop;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           -- If we get here, we didn't find A on B's chain.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1           raise Program_Error;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1       end if;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 This is ordered in \hich\af1\dbch\af1\loch\f1 the order of likelihood, so the most common cases are checked}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 first and use the least instructions to check.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Note that the "two different tasks" case is quite rare, and probably will fail}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 most of the time. So it's hard to get worried about how expensive i\hich\af1\dbch\af1\loch\f1 t is.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Besides, these dynamic checks themselves are quite rare in real code. Usually,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 rare * rare = don't care!}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > > Now, moving on to critical work...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > With 2020 still 7 years away, I wouldn't consider anything critical,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > but yeah, OK, get back to work\hich\af1\dbch\af1\loch\f1 .  ;-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sorry, you misunderstood. While Ada 2012 does have a couple of critical bugs}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 that need fixing yesterday, that's not what I meant. I meant "work critical to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 my continued employment in this position". Specifically:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (1) People are coming from all over the world for this ARG meeting (I realize}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     you just have to take the T or something, but that's not the case for most}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     of us). They won't be happy if the agenda is mostly empty because I didn't}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     get the work don\hich\af1\dbch\af1\loch\f1 e.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (2) I have a HILT panel on Thursday (please come, BTW), and I'll look pretty}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     clueless if I don't have anything to say.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 That's why I'm here right now, rather than relaxing and watching football.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 *****************************************************\hich\af1\dbch\af1\loch\f1 ***********}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Tucker Taft}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Saturday, December  1, 2012  8:11 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >> Static chains, on the other hand, are (approximately) never longer}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >> than 3.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 >}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > True enough. But if you have as much overhead as in Steve's}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > description to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > *create* those da\hich\af1\dbch\af1\loch\f1 ta structures (recall that they're dynamically sized,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > which in Janus/Ada would mean heap allocation!)  ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 There is no need for dynamically-sized structures.  Steve might have described}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 them that way, but in our discussions, these were linked stack-base\hich\af1\dbch\af1\loch\f1 d structures,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 each node of which was of fixed size.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 When we discussed it, we had two kinds of (singly-linked) lists of frame ids:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 one kind of list represented a particular named access type (which is the target}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 of a conversion or an allocator), and consis\hich\af1\dbch\af1\loch\f1 ted of one link per static nesting}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 level enclosing the declaration of the access type; the other kind of list}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 represented a set of levels for a particular run-time tag or access parameter,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 where the set starts out as a single level, but which grows when an access}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameter is passed to a more nested subprogram, by linking into the set the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 frame-id for the outer su\hich\af1\dbch\af1\loch\f1 bprogram which received the original access parameter.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 This corresponds exactly to the situation where the small-number approach}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 requires a possible fixup.  The check is to verify that at least one of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 members of the set appears in the list representing\hich\af1\dbch\af1\loch\f1  the target access type.  If}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 we treat the two lists as representing sets of frame ids, then it is a check to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 see if the two sets overlap at all.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 In any case, a white board would definitely be helpful to explain this.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I think the overhead is pretty low ove\hich\af1\dbch\af1\loch\f1 rall.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Jean-Pierre Rosen}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Sunday, December  2, 2012  4:47 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > With 2020 still 7 years away, I wouldn't consider anything critical,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > but yeah, OK, get back to work.  ;-)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 And th\hich\af1\dbch\af1\loch\f1 en, ASIS raises its ugly head...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Steve Baird}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Monday, December  3, 2012  11:34 AM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > There is no need for dynamically-sized structures.  Steve might have}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > described them that way, but in our discussions, these were linked}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > stack-based structures, each node of which was of fixed size.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Even in my description, there is no *need* for dyna\hich\af1\dbch\af1\loch\f1 mic-sized structures}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (although such structures are an implementation option).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Suppose we have a subprogram for which we need to declare an accessibility level}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 object. The idea is that the number of predecessors stored in that object is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 known statically - \hich\af1\dbch\af1\loch\f1 one for the "static link" and then a known additional number}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (usually zero or one) for each parameter.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Consider, however, a routine with a bunch of anonymous-access-to-object typed}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 parameters.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The straightforward approach would include a predecessor for \hich\af1\dbch\af1\loch\f1 each one. If it}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 turns out at runtime that many of the parameters for some particular execution}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 of the subprogram body have the same accessibility level (e.g., they designate}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 library-level objects), then this would result in storing repeated (and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 therefore \hich\af1\dbch\af1\loch\f1 redundant) predecessors.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 This is ok but one could imagine an implementation trying to detect at least}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 some cases like this and reduce the number of predecessors by eliminating}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 redundant ones. In that case, I agree, we do end up with a dynamically}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 constrai\hich\af1\dbch\af1\loch\f1 ned object, but even then we have a reasonable statically-known upper}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 bound on the size of the object (i.e., the size we would have used in the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 unoptimized scheme) which could be used to avoid dynamic storage allocation.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 **********************************\hich\af1\dbch\af1\loch\f1 ******************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Monday, December  3, 2012  4:32 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > This is ok but one could imagine an implementation trying to detect at}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > least some cases like this and reduce the number of predecessors by}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > eliminating redundant ones. In that case, I agree, we do end up with a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > dynamically constrained object, but even then we have a reasonable}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > statically-known upper bound on the size of the object (i.e., the size}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > we would have used in the unoptimized scheme) which could be used to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > avoid dynamic storage allocation.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I thin\hich\af1\dbch\af1\loch\f1 k you're missing the big picture here. This implementation is amazingly}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 complex, and the number of people who understand it can be counted on one hand}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (something I highly doubt is going to change significantly no matter how many}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 whiteboard presentations ar\hich\af1\dbch\af1\loch\f1 e given). Tucker says that "This corresponds exactly}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 to the situation where the small-number approach requires a possible fixup." --}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 which I can believe -- but the number of people who understand why that fixup is}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 necessary can be counted on two hands (and\hich\af1\dbch\af1\loch\f1  I'm being generous). I know that our}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 compiler uses that fixup in some situations, but I have no real idea why or}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 whether it is implemented right -- it just passes the tests that we have. (I}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 certainly shouldn't be counted on either of these hands at the mo\hich\af1\dbch\af1\loch\f1 ment.)}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I proposed a simpler implementation that:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (A) Piggybacks on the existing *reference* implementation of finalization;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (B) Directly corresponds to the rules being checked;}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (C) As the same or better per-master overhead in the default implementation}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1   \hich\af1\dbch\af1\loch\f1   (only one word per master is needed);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (D) Has the same overhead in passing "Level_Objects", and allows the most}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     masters (that don't need a Level_Object) to skip having them.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 The only downside is that the checks might be expensive in some *unusual* cases.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I point out:}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (1) Those cases are quite unusual (they need both recursive routines and dynamic}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     checks in the same subprograms);}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (2) Ada 2012 tries hard to eliminate dynami\hich\af1\dbch\af1\loch\f1 c checks. A significant reason for}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     the inclusion of "in out" parameters on functions was to get rid of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     dynamic checks associated with the workaround. Similarly, the motivating}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     reason for including "aliased" parameters is that these are guar\hich\af1\dbch\af1\loch\f1 anteed to}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     work with the return object of a function (as any needed checks are made at}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     the call site) -- there should be no dynamic checks involved with those}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     either. So, in new code, the presence of dynamic checks pretty much indicate}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     a des\hich\af1\dbch\af1\loch\f1 ign error -- it's hard to worry about the performance of things that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     shouldn't occur.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 (3) So we're mostly left with the performance of legacy code, and for that,}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     there is a clear solution if adding a small amount of additional overhead in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     the L\hich\af1\dbch\af1\loch\f1 evel_Object is acceptable (and task stacks are contiguous, which they}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     usually are), in which case the only time the check could become expensive}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     is when the levels belong to different tasks and neither is library level.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     And then to actually be\hich\af1\dbch\af1\loch\f1 come expensive, recursion would also need to be}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     involved (you'd need hundreds of nested masters before the performance could}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     become at all noticeable). That ought to be rare enough to be ignorable (I}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     would really doubt that anyone would be comp\hich\af1\dbch\af1\loch\f1 laining about the performance of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1     something so rarely encountered).}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 It's valuable to work out an alternative implementation for those not using}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 finalization chains and thumbs (which I suppose includes GNAT), but I really}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 doubt that we should talk about that implementation in the AARM notes, simply}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 because it is so complex and frankly, bizarre. And this AI is primarily about a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 reference implementation for the AARM; what GNAT chooses to do is essentially}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 irrelevant for the AARM.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Tucker Taft}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Monday, December  3, 2012  8:27 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > ... It's valuable to wor\hich\af1\dbch\af1\loch\f1 k out an alternative implementation for those}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > not using finalization chains and thumbs (which I suppose includes}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > GNAT), but I really doubt that we should talk about that}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > implementation in the AARM notes, simply because it is so complex and}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > frankly,\hich\af1\dbch\af1\loch\f1  bizarre. And this AI is primarily about a reference}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > implementation for the AARM; what GNAT chooses to do is essentially irrelevant for the AARM.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 GNAT is relevant since it tends to be the first "real" implementation of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 language features.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 But in any\hich\af1\dbch\af1\loch\f1  case, I think we should probably leave most of the details out of the}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 AARM, and put them in separate design notes, or perhaps in AIs. We can describe}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 both alternatives at a high level, and give a reference to the AI or wherever we}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 decide to put the detail\hich\af1\dbch\af1\loch\f1 s.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ****************************************************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 From: Randy Brukardt}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Sent: Monday, December  3, 2012  9:02 PM}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 ...}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > GNAT is relevant since it tends to be the first "real"}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > implementation of the language features.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 Well, sure, but we all know that real compilers have all kinds of gunk to deal}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 with that we surely don't want to be discussing in terms of a reference}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 implementation.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > But in any case, I think we should probabl\hich\af1\dbch\af1\loch\f1 y leave most of the details}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > out of the AARM, and put them in separate design notes, or perhaps in}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > AIs.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > We can describe both alternatives at a high level, and give a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 > reference to the AI or wherever we decide to put the details.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 I agree that we don'\hich\af1\dbch\af1\loch\f1 t want a lot of details. Preferably, we'd have a level of}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 detail roughly the same as we have for implementing finalization, and then a}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 suggestion to read AI12-0016-1 for more details and alternative implementations.}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par }{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid5855924 \hich\af1\dbch\af1\loch\f1 ***************************************\hich\af1\dbch\af1\loch\f1 *************************}{\rtlch\fcs1 \af1 \ltrch\fcs0 \insrsid2325030 
\par 
\par 
\par 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100215aa28421070000db1d0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594f6f1b4514bf23f11d467b2fb113274da23a55ecd80db469a3d82dea71bc3bf64e33bbb39a1927f10db547242444411ca8c48d03
022ab51297f269024550a47e05deccecae77e271939400153487d63bfb7b6fdefbbd3ff367af5c3d4a183a2042529e3683fa7bb5009134e4114d47cde076bf7b
69354052e134c28ca7a4194c880cae6ebcfbce15bcae62921004f2a95cc7cd20562a5b5f5890210c63f91ecf480aef865c2458c1a3182d44021f82de842d2cd6
6a2b0b09a66980529c80da5bc3210d09ea6b95c146a1bcc3e03155520f844cf4b46ae248186cb45fd70839916d26d00166cd00e689f8619f1ca900312c15bc68
0635f3172c6c5c59c0ebb9105373642b725df397cbe502d1fea299538c06e5a4f56e63edf256a9df00989ac5753a9d76a75eea33001c86e0a9b5a5aab3d15dad
b70a9d1590fd39abbb5d5bae355c7c45ffd28ccd6bad566b792db7c52a3520fbb331835fadad3436171dbc0159fcf20cbed1da6cb7571cbc0159fcca0cbe7b79
6da5e1e20d286634dd9f41eb8076bbb9f61232e46cdb0b5f05f86a2d874f51900d6576e929863c55f3722dc1f7b8e8024003195634456a9291210e218bdb98d1
81a07a02bc4e70e58d1d0ae5cc909e0bc950d04c35830f320c1531d5f7f2d9772f9f3d41c7f79f1edffff1f8c183e3fb3f58458ed4364e4755a917df7cfac7a3
8fd0ef4fbe7ef1f0733f5e56f1bf7cfff1cf3f7de60742f94ccd79fec5e35f9f3e7efee527bf7dfbd003df14785085f7694224ba490ed11e4fc031c38a6b3919
88f349f4634cab129be948e214eb593cfa3b2a76d0372798610fae455c06ef08681f3ee0b5f13dc7e05e2cc62a8fb7e3d9f53871803b9cb316175e16aeebb92a
34f7c7e9c83fb91857717b181ff8e66ee3d4896f679c41dfa43e95ed983866ee329c2a3c22295148bfe3fb8478f8ba4ba9c3eb0e0d05977ca8d05d8a5a987a29
e9d381934d53a16d9a405c263e0321de0e373b77508b339fd75be4c045425560e631be4f9843e3353c5638f1a9ece3845509bf8155ec33b237116115d7910a22
3d228ca34e44a4f4c9dc12e06f25e8d7a175f8c3bec326898b148aeefb74dec09c57915b7cbf1de324f3617b348dabd8f7e53ea42846bb5cf9e03bdcad10fd0c
71c0e9dc70dfa1c409f7e9dde0361d39264d1344bf190b4f2caf11eee46f6fc286989856034ddde9d5094d5fd5b813e8dbb9e317d7b8a1553effea91c7ee37b5
656f0209be9ad93ed1a8e7e14eb6e73617117df3bbf3161ea7bb040a6276897adb9cdf36e7e03fdf9ce7d5f3c5b7e469178606adb74c76a36db6ddc9dc5df790
32d65313466e48b3f196b0f6445d18d472e6c449ca535816c34f5dc93081831b096c6490e0ea43aae25e8c33d8b4d703ad642473d52389322ee1b06886bdba35
1e36feca1e3597f521c4760e89d50e8fecf0921e2ece1aa51a63d5c81c688b8996b482b34eb67439570abebdce64756dd49967ab1bd34c5374662b5dd6149b43
39505eba0683259bb0a941b015029657e0ccafa786c30e6624d2bcdb1815613151f87b42947b6d1d8971446c889ce10a9b7513bb228566fcd3eed91c391f9b25
6b40dae94698b4989f3f6724b950302519044f56134babb5c55274d80cd69617970314e2ac190ce1980b3f930c8226f53610b311dc15854ad8ac3db5164d914e
3d5ef367551d6e2ee6148c53c699906a0bcbd8c6d0bcca43c5523d93b57f71b9a193ed621cf03493b359b1b40a29f2af5901a176434b864312aa6ab02b239a3b
fb9877423e5644f4e2e8100dd858ec61083f70aafd89a884db0a53d0fa01aed634dbe695db5bf34e53bdd032383b8e5916e3bc5beaab99a2e22cdcf493d206f3
54310f7cf3da6e9c3bbf2bbae22fca956a1affcf5cd1cb015c1e2c453a0221dcec0a8c74a534032e54cca10b65310dbb02d67dd33b205be07a165e03f970bf6c
fe17e440ff6f6bceea30650d6740b547474850584e542c08d985b664b2ef1465f57ce9b12a59aec86454c55c9959b307e480b0beee812bba070728865437dd24
6f03067732ffdce7bc820623bd47a9d69bd3c9caa5d3d6c03fbd71b1c50c4e9dd84be8fc2df82f4d2c57f7e9ea67e58d78b146561dd12fa6bba4465115cee2b7
b6964ff59a269c6501aeacb5b663cd78bcb85c1807519cf51806cbfd4c06574048ff03eb1f1521b31f2bf482dae77bd05b117c7bb0fc21c8ea4bbaab4106e906
697f0d60df63076d32695596da7ce7a3592b16eb0bdea896f39e205b5b7696789f93ec7213e54ee7d4e245929d33ec706dc7e6520d913d59a230342cce212630
e62b57f543141fdc83406fc195ff98d94f533283275307d9ae30d935e0d124ffc9a45d706dd6e9338c46b2748f0c118d8e8af347c9842d21fb79a4d8221bb416
d389560a2ef90e0dae608ed7a276b52c85174f172e25ccccd0b24b617397e653001fc7f2c6ad8f7680b74dd67aad8bab608aa57f85b23318efa7cc7bf2392b65
f6a0f8ca40bd0665eae8d594e54c0179b389079f370586a357cff45f58746ca69b94ddf8130000ffff0300504b0304140006000800000021000dd1909fb60000
001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba
109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e
6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd
381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c02
00001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c000000036
0100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c000000
00000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d0014000600080000002100215aa2842107
0000db1d00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1
909fb60000001b01000027000000000000000000000000002b0a00007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000260b00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax376\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 9;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 1;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 2;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 3;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 4;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 5;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 6;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 header;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footer;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index heading;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of figures;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope return;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation reference;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 line number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 page number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote text;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of authorities;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 macro;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 toa heading;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 5;\lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Closing;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Signature;\lsdsemihidden1 \lsdunhideused1 \lsdpriority1 \lsdlocked0 Default Paragraph Font;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Message Header;\lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Salutation;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Date;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Note Heading;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Block Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;
\lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Document Map;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Plain Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 E-mail Signature;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Bottom of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal (Web);\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Acronym;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Cite;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Code;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Definition;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Keyboard;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Preformatted;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Sample;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Typewriter;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Variable;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation subject;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 No List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Balloon Text;\lsdpriority39 \lsdlocked0 Table Grid;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdlocked0 Placeholder Text;
\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;
\lsdpriority65 \lsdlocked0 Medium List 1;\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;
\lsdpriority71 \lsdlocked0 Colorful Shading;\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;
\lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdlocked0 Revision;
\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Mention;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hashtag;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Unresolved Mention;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Link;}}{\*\datastore 01050000
02000000180000004d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e50000000000000000000000002049
7a2dac18d801feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}